tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
auth("cbarrie.bsky.social")
req <- atrrr:::build_auth_request()  # Build the request
auth
function (user, password, domain = "https://bsky.app/", verbose = TRUE,
overwrite = FALSE, token = NULL)
{
if (is.null(token)) {
url <- httr2::url_build(list(scheme = "https", hostname = httr2::url_parse(domain)$hostname,
path = "/settings/app-passwords"))
if (missing(user)) {
rlang::check_installed("askpass")
user <- askpass::askpass("Please enter your username (e.g., \"jbgruber.bsky.social\")")
}
if (missing(password) || is.null(password)) {
if (interactive()) {
if (verbosity(verbose))
cli::cli_alert_info("Navigate to {.url {url}} and create a new app password")
utils::browseURL(url)
password <- askpass::askpass("Please enter your app password")
}
else {
cli::cli_abort("You need to run {.fn auth} in an interactive session")
}
}
if (!is.null(user) && !is.null(password)) {
tryCatch({
token <- req_token(user, password)
}, error = function(e) {
message("Error in req_token(): ", e$message)
stop("Failed to authenticate. Check your username, password, or the BlueSky API.")
})
}
else {
cli::cli_abort("You need to supply username and password.")
}
}
else {
if (!methods::is(token, "bsky_token")) {
cli::cli_abort("token needs to be an object of class {.emph bsky_token}")
}
token <- refresh_token(token)
}
token$domain <- domain
token$accessJwt <- token$accessJwt
token$refreshJwt <- token$refreshJwt
token$valid_until <- Sys.time() + 3 * 60
token$password <- password
class(token) <- "bsky_token"
f <- Sys.getenv("BSKY_TOKEN", unset = "token.rds")
p <- tools::R_user_dir("atrrr", "cache")
dir.create(p, showWarnings = FALSE, recursive = TRUE)
rlang::env_poke(env = the, nm = "bsky_token", value = token,
create = TRUE)
sel <- TRUE
if (file.exists(file.path(p, f)) && !overwrite) {
sel <- utils::askYesNo("A token already exists on disk. Do you want to overwrite it?",
default = FALSE)
}
if (isTRUE(sel)) {
httr2::secret_write_rds(x = token, path = file.path(p,
f), key = I(rlang::hash("musksucks")))
if (verbosity(verbose))
cli::cli_alert_success("Succesfully authenticated!")
invisible(token)
}
}
<bytecode: 0x123459d60>
function (user, password, domain = "https://bsky.app/", verbose = TRUE,
overwrite = FALSE, token = NULL)
{
if (is.null(token)) {
url <- httr2::url_build(list(scheme = "https", hostname = httr2::url_parse(domain)$hostname,
path = "/settings/app-passwords"))
if (missing(user)) {
rlang::check_installed("askpass")
user <- askpass::askpass("Please enter your username (e.g., \"jbgruber.bsky.social\")")
}
if (missing(password) || is.null(password)) {
if (interactive()) {
if (verbosity(verbose))
cli::cli_alert_info("Navigate to {.url {url}} and create a new app password")
utils::browseURL(url)
password <- askpass::askpass("Please enter your app password")
}
else {
cli::cli_abort("You need to run {.fn auth} in an interactive session")
}
}
if (!is.null(user) && !is.null(password)) {
tryCatch({
token <- req_token(user, password)
}, error = function(e) {
message("Error in req_token(): ", e$message)
stop("Failed to authenticate. Check your username, password, or the BlueSky API.")
})
}
else {
cli::cli_abort("You need to supply username and password.")
}
}
else {
if (!methods::is(token, "bsky_token")) {
cli::cli_abort("token needs to be an object of class {.emph bsky_token}")
}
token <- refresh_token(token)
}
token$domain <- domain
token$accessJwt <- token$accessJwt
token$refreshJwt <- token$refreshJwt
token$valid_until <- Sys.time() + 3 * 60
token$password <- password
class(token) <- "bsky_token"
f <- Sys.getenv("BSKY_TOKEN", unset = "token.rds")
p <- tools::R_user_dir("atrrr", "cache")
dir.create(p, showWarnings = FALSE, recursive = TRUE)
rlang::env_poke(env = the, nm = "bsky_token", value = token,
create = TRUE)
sel <- TRUE
if (file.exists(file.path(p, f)) && !overwrite) {
sel <- utils::askYesNo("A token already exists on disk. Do you want to overwrite it?",
default = FALSE)
}
if (isTRUE(sel)) {
httr2::secret_write_rds(x = token, path = file.path(p,
f), key = I(rlang::hash("musksucks")))
if (verbosity(verbose))
cli::cli_alert_success("Succesfully authenticated!")
invisible(token)
}
}
<bytecode: 0x123459d60>
function (user, password, domain = "https://bsky.app/", verbose = TRUE,
overwrite = FALSE, token = NULL)
{
if (is.null(token)) {
url <- httr2::url_build(list(scheme = "https", hostname = httr2::url_parse(domain)$hostname,
path = "/settings/app-passwords"))
if (missing(user)) {
rlang::check_installed("askpass")
user <- askpass::askpass("Please enter your username (e.g., \"jbgruber.bsky.social\")")
}
if (missing(password) || is.null(password)) {
if (interactive()) {
if (verbosity(verbose))
cli::cli_alert_info("Navigate to {.url {url}} and create a new app password")
utils::browseURL(url)
password <- askpass::askpass("Please enter your app password")
}
else {
cli::cli_abort("You need to run {.fn auth} in an interactive session")
}
}
if (!is.null(user) && !is.null(password)) {
tryCatch({
token <- req_token(user, password)
}, error = function(e) {
message("Error in req_token(): ", e$message)
stop("Failed to authenticate. Check your username, password, or the BlueSky API.")
})
}
else {
cli::cli_abort("You need to supply username and password.")
}
}
else {
if (!methods::is(token, "bsky_token")) {
cli::cli_abort("token needs to be an object of class {.emph bsky_token}")
}
token <- refresh_token(token)
}
token$domain <- domain
token$accessJwt <- token$accessJwt
token$refreshJwt <- token$refreshJwt
token$valid_until <- Sys.time() + 3 * 60
token$password <- password
class(token) <- "bsky_token"
f <- Sys.getenv("BSKY_TOKEN", unset = "token.rds")
p <- tools::R_user_dir("atrrr", "cache")
dir.create(p, showWarnings = FALSE, recursive = TRUE)
rlang::env_poke(env = the, nm = "bsky_token", value = token,
create = TRUE)
sel <- TRUE
if (file.exists(file.path(p, f)) && !overwrite) {
sel <- utils::askYesNo("A token already exists on disk. Do you want to overwrite it?",
default = FALSE)
}
if (isTRUE(sel)) {
httr2::secret_write_rds(x = token, path = file.path(p,
f), key = I(rlang::hash("musksucks")))
if (verbosity(verbose))
cli::cli_alert_success("Succesfully authenticated!")
invisible(token)
}
}
auth <- function (user, password, domain = "https://bsky.app/", verbose = TRUE,
overwrite = FALSE, token = NULL)
{
if (is.null(token)) {
url <- httr2::url_build(list(scheme = "https", hostname = httr2::url_parse(domain)$hostname,
path = "/settings/app-passwords"))
if (missing(user)) {
rlang::check_installed("askpass")
user <- askpass::askpass("Please enter your username (e.g., \"jbgruber.bsky.social\")")
}
if (missing(password) || is.null(password)) {
if (interactive()) {
if (verbosity(verbose))
cli::cli_alert_info("Navigate to {.url {url}} and create a new app password")
utils::browseURL(url)
password <- askpass::askpass("Please enter your app password")
}
else {
cli::cli_abort("You need to run {.fn auth} in an interactive session")
}
}
if (!is.null(user) && !is.null(password)) {
tryCatch({
token <- req_token(user, password)
}, error = function(e) {
message("Error in req_token(): ", e$message)
stop("Failed to authenticate. Check your username, password, or the BlueSky API.")
})
}
else {
cli::cli_abort("You need to supply username and password.")
}
}
else {
if (!methods::is(token, "bsky_token")) {
cli::cli_abort("token needs to be an object of class {.emph bsky_token}")
}
token <- refresh_token(token)
}
token$domain <- domain
token$accessJwt <- token$accessJwt
token$refreshJwt <- token$refreshJwt
token$valid_until <- Sys.time() + 3 * 60
token$password <- password
class(token) <- "bsky_token"
f <- Sys.getenv("BSKY_TOKEN", unset = "token.rds")
p <- tools::R_user_dir("atrrr", "cache")
dir.create(p, showWarnings = FALSE, recursive = TRUE)
rlang::env_poke(env = the, nm = "bsky_token", value = token,
create = TRUE)
sel <- TRUE
if (file.exists(file.path(p, f)) && !overwrite) {
sel <- utils::askYesNo("A token already exists on disk. Do you want to overwrite it?",
default = FALSE)
}
if (isTRUE(sel)) {
httr2::secret_write_rds(x = token, path = file.path(p,
f), key = I(rlang::hash("musksucks")))
if (verbosity(verbose))
cli::cli_alert_success("Succesfully authenticated!")
invisible(token)
}
}
auth("cbapiwork.bsky.social")
auth("cbapiwork.bsky.social")
# Load libraries
library(dplyr)
library(lubridate)
# Define input file
userinfo_file <- "bsky_data/processed/combined_userinfo_2024-11-18.rds"
# Define base directory for saving follows data
base_dir <- "bsky_data/follows"
if (!dir.exists(base_dir)) dir.create(base_dir, recursive = TRUE)
# Get today's date for collection
collection_date <- Sys.Date()
# Function to safely save data as .rds
safe_save_rds <- function(data, path) {
tryCatch({
saveRDS(data, path)
}, error = function(e) {
message(sprintf("Error saving data to %s: %s", path, e$message))
})
}
# Load the user info dataset
userinfo <- readRDS(userinfo_file)
# Ensure the dataset contains the `actor_handle` column
if (!"actor_handle" %in% names(userinfo)) {
stop("The userinfo dataset must contain an 'actor_handle' column.")
}
# Process each user to get and save follows
for (user in userinfo$actor_handle) {
# Check if the user's follows data already exists
user_dir <- file.path(base_dir, paste0(user, "_", collection_date))
follows_path <- file.path(user_dir, paste0("follows_", collection_date, ".rds"))
if (file.exists(follows_path)) {
message(sprintf("Follows for user %s already collected. Skipping.", user))
next
}
tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
# Load libraries
library(dplyr)
library(lubridate)
# Define input file
userinfo_file <- "bsky_data/processed/combined_userinfo_2024-11-18.rds"
# Define base directory for saving follows data
base_dir <- "bsky_data/follows"
if (!dir.exists(base_dir)) dir.create(base_dir, recursive = TRUE)
# Get today's date for collection
collection_date <- Sys.Date()
# Function to safely save data as .rds
safe_save_rds <- function(data, path) {
tryCatch({
saveRDS(data, path)
}, error = function(e) {
message(sprintf("Error saving data to %s: %s", path, e$message))
})
}
# Load the user info dataset
userinfo <- readRDS(userinfo_file)
# Ensure the dataset contains the `actor_handle` column
if (!"actor_handle" %in% names(userinfo)) {
stop("The userinfo dataset must contain an 'actor_handle' column.")
}
# Process each user to get and save follows
for (user in userinfo$actor_handle) {
# Check if the user's follows data already exists
user_dir <- file.path(base_dir, paste0(user, "_", collection_date))
follows_path <- file.path(user_dir, paste0("follows_", collection_date, ".rds"))
if (file.exists(follows_path)) {
message(sprintf("Follows for user %s already collected. Skipping.", user))
next
}
tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
auth("cbarrie.bsky.social")
auth("cbapiwork1.bsky.social")
# Load libraries
library(dplyr)
library(lubridate)
# Define input file
userinfo_file <- "bsky_data/processed/combined_userinfo_2024-11-18.rds"
# Define base directory for saving follows data
base_dir <- "bsky_data/follows"
if (!dir.exists(base_dir)) dir.create(base_dir, recursive = TRUE)
# Get today's date for collection
collection_date <- Sys.Date()
# Function to safely save data as .rds
safe_save_rds <- function(data, path) {
tryCatch({
saveRDS(data, path)
}, error = function(e) {
message(sprintf("Error saving data to %s: %s", path, e$message))
})
}
# Load the user info dataset
userinfo <- readRDS(userinfo_file)
# Ensure the dataset contains the `actor_handle` column
if (!"actor_handle" %in% names(userinfo)) {
stop("The userinfo dataset must contain an 'actor_handle' column.")
}
# Process each user to get and save follows
for (user in userinfo$actor_handle) {
# Check if the user's follows data already exists
user_dir <- file.path(base_dir, paste0(user, "_", collection_date))
follows_path <- file.path(user_dir, paste0("follows_", collection_date, ".rds"))
if (file.exists(follows_path)) {
message(sprintf("Follows for user %s already collected. Skipping.", user))
next
}
tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
auth("cbarrie.bsky.social")
auth("cbapiwork.bsky.social")
auth("cbarrie.bsky.social")
rlang::last_trace()
auth("cbarrie.bsky.social")
# Load libraries
library(dplyr)
library(lubridate)
# Define input file
userinfo_file <- "bsky_data/processed/combined_userinfo_2024-11-18.rds"
# Define base directory for saving follows data
base_dir <- "bsky_data/follows"
if (!dir.exists(base_dir)) dir.create(base_dir, recursive = TRUE)
# Get today's date for collection
collection_date <- Sys.Date()
# Function to safely save data as .rds
safe_save_rds <- function(data, path) {
tryCatch({
saveRDS(data, path)
}, error = function(e) {
message(sprintf("Error saving data to %s: %s", path, e$message))
})
}
# Load the user info dataset
userinfo <- readRDS(userinfo_file)
# Ensure the dataset contains the `actor_handle` column
if (!"actor_handle" %in% names(userinfo)) {
stop("The userinfo dataset must contain an 'actor_handle' column.")
}
# Process each user to get and save follows
for (user in userinfo$actor_handle) {
# Check if the user's follows data already exists
user_dir <- file.path(base_dir, paste0(user, "_", collection_date))
follows_path <- file.path(user_dir, paste0("follows_", collection_date, ".rds"))
if (file.exists(follows_path)) {
message(sprintf("Follows for user %s already collected. Skipping.", user))
next
}
tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
auth("cbapiwork1.bsky.social")
auth("cbapiwork1.bsky.social")
auth("cbapiwork.bsky.social")
# Load libraries
library(dplyr)
library(lubridate)
# Define input file
userinfo_file <- "bsky_data/processed/combined_userinfo_2024-11-18.rds"
# Define base directory for saving follows data
base_dir <- "bsky_data/follows"
if (!dir.exists(base_dir)) dir.create(base_dir, recursive = TRUE)
# Get today's date for collection
collection_date <- Sys.Date()
# Function to safely save data as .rds
safe_save_rds <- function(data, path) {
tryCatch({
saveRDS(data, path)
}, error = function(e) {
message(sprintf("Error saving data to %s: %s", path, e$message))
})
}
# Load the user info dataset
userinfo <- readRDS(userinfo_file)
# Ensure the dataset contains the `actor_handle` column
if (!"actor_handle" %in% names(userinfo)) {
stop("The userinfo dataset must contain an 'actor_handle' column.")
}
# Process each user to get and save follows
for (user in userinfo$actor_handle) {
# Check if the user's follows data already exists
user_dir <- file.path(base_dir, paste0(user, "_", collection_date))
follows_path <- file.path(user_dir, paste0("follows_", collection_date, ".rds"))
if (file.exists(follows_path)) {
message(sprintf("Follows for user %s already collected. Skipping.", user))
next
}
tryCatch({
# Get follows
follows <- get_follows(actor = user, limit = 10000L)
# Create a directory for the user with the date suffix
if (!dir.exists(user_dir)) dir.create(user_dir, recursive = TRUE)
# Save the follows data
safe_save_rds(data.frame(follows), follows_path)
# Message for successful processing
message(sprintf("Saved follows for user %s to %s", user, follows_path))
}, error = function(e) {
message(sprintf("Error processing follows for user %s: %s", user, e$message))
})
}
